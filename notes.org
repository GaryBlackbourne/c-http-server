* Specification

HTTP server program. When running, this program should serve as a http server,
giving websites back, on http requests. First goal is to serve only files,
without any server side code execution. (only http get)  This program should
be configured by a configuration file, and/or command line flags. Clients should
be able to connect, and served by several threads ensuring multiple simultaneous
communication channels.

* Modules
** Processor                                                     :processor:
Processes incomming http requests, and acquires files for response.

** Connector                                                     :connector:
Listens for incomming connection on given port, and sets up communication channels.

** Worker                                                        :worker:
A module that implemetns the communication, builds up tcp connection, reading and writing data into sockets.
All buffering and networking is done in here.

** Configuration parser                                      :config_parser:
Parses cmd line configs, and config files, sets up a configuration structure
- generates a list of key value pairs from command line or config file arguments
- generates server configuration object
- sets default values

** Logger                                                           :logger:
Stores server logs into a log file.

** File manager                                               :file_manager:
Manages files, opens closes, and serves them to other modules
This module opens the file if exists, and gives back its content.
  
* Tasks
** DONE argparser
** DONE configuration
** Connection Test [1/5]
*** DONE Configuration reading
*** TODO Worker
**** TODO test worker behavior
*** TODO worker thread
*** TODO Workerpool [0/1]
**** TODO implement features
- [ ] create workerpool
- [ ] destroy workerpool
- [ ] start/stop workerpool
- [ ] test workerpool
*** TODO Job distribution

